// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserType {
  GUEST
  RELATIVES
  STAFF
}

enum ReservationStatus {
  RESERVED
  CANCELED
  PAID
  PAID_CANCEL_FEE
}

enum studioStatus {
  AVAILABLE
  UNAVAILABLE
}

model User {
  id          Int           @id @default(autoincrement()) @db.UnsignedInt
  publicId    String        @unique @default(cuid()) @db.Char(36)
  firstName   String        @db.VarChar(36)
  lastName    String        @db.VarChar(36)
  email       String        @unique @db.VarChar(255)
  phoneNumber String        @db.VarChar(36)
  type        UserType      @default(GUEST)
  createdAt   DateTime      @default(now()) @db.DateTime(3)
  updatedAt   DateTime      @default(now()) @updatedAt @db.DateTime(3)
  reservation Reservation[]
}

model Studio {
  id           Int           @id @default(autoincrement()) @db.UnsignedInt
  publicId     String        @unique @default(cuid()) @db.Char(36)
  name         String        @db.VarChar(36)
  status       studioStatus
  reservations Reservation[]
  plans        Plan[]
}

model Plan {
  id           Int           @id @default(autoincrement()) @db.UnsignedInt
  publicId     String        @unique @default(cuid()) @db.Char(36)
  name         String        @db.VarChar(70)
  nameJa       String        @db.VarChar(70)
  price        Decimal       @db.Decimal(10, 2)
  studio       Studio        @relation(fields: [studioId], references: [id])
  studioId     Int           @db.UnsignedInt
  reservations Reservation[]
  dateIn       String?
  dateEnd      String?
}

model Reservation {
  id        Int               @id @default(autoincrement()) @db.UnsignedInt
  publicId  String            @unique @default(cuid()) @db.Char(36)
  plan      Plan              @relation(fields: [planId], references: [id])
  planId    Int               @db.UnsignedInt
  dateIn    DateTime          @db.DateTime(3)
  dateEnd   DateTime          @db.DateTime(3)
  status    ReservationStatus @default(RESERVED)
  studio    Studio            @relation(fields: [studioId], references: [id])
  studioId  Int               @db.UnsignedInt
  user      User              @relation(fields: [userId], references: [id])
  userId    Int               @db.UnsignedInt
  createdAt DateTime          @default(now()) @db.DateTime(3)
  updatedAt DateTime          @default(now()) @updatedAt @db.DateTime(3)
  createdBy String?
  updatedBy String?
}
